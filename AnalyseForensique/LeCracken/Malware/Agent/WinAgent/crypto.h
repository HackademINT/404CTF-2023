#pragma once

#include <windows.h>
#include <bcrypt.h>
#include <wincrypt.h>
#include "base64.h"

#include <string>
#include <vector>

using std::string;
using std::vector;

#define SESSION_KEY_SIZE 32

typedef unsigned char BYTE;


class CryptoSession {
	BCRYPT_ALG_HANDLE aesHandle;
	BCRYPT_KEY_HANDLE sessionKeyHandle;
	BYTE sessionKey[SESSION_KEY_SIZE];
	BYTE iv[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
public:
	CryptoSession();
	~CryptoSession();
	vector<BYTE> getProtectedSessionKey();
	vector<BYTE> encrypt(vector<BYTE> data);
	vector<BYTE> decrypt(vector<BYTE> data);
};