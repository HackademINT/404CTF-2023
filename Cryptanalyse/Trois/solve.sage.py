

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_27584244764354155600648132819557552425739308915389010331967630630278781451355292616283908233886829051620691675066793826289384271685368839532793120327210935428497022861038124315374145401503459557634600149428324393706219187751525385285666118615589270213292021952450269684503014960000456627468842728153985933435658303773466724122153491920323012054102145457826086103327235133218830942039915609182594401161042859134214824202027169450776481815084629313897269088778093661872262506720997309450453842156237745662622884714477231701108303167577929395851134011771107866535083165178026955131807919002588840216970211283961590847119 = Integer(27584244764354155600648132819557552425739308915389010331967630630278781451355292616283908233886829051620691675066793826289384271685368839532793120327210935428497022861038124315374145401503459557634600149428324393706219187751525385285666118615589270213292021952450269684503014960000456627468842728153985933435658303773466724122153491920323012054102145457826086103327235133218830942039915609182594401161042859134214824202027169450776481815084629313897269088778093661872262506720997309450453842156237745662622884714477231701108303167577929395851134011771107866535083165178026955131807919002588840216970211283961590847119); _sage_const_0x13333 = Integer(0x13333); _sage_const_19927008564294677002520448437970189702487045648296885900114209856216930305451618124458156678801175987674123914659764210541248496719249933402823789713001815042047073138247252659866129206243219671633681286208956499952633370685989888960098084954742719978788425463076280549248624761445797200322025774847601077501261839135577696465884169289996756953347035809346587936831552564678928269851681275066679507994429117368820892833335277246964370806184539958497154299718109950045195337068953209732230159909730862209492939796706112091048490516753954885137398037737716953735239767024153079083060887610014817408325631010848848643987 = Integer(19927008564294677002520448437970189702487045648296885900114209856216930305451618124458156678801175987674123914659764210541248496719249933402823789713001815042047073138247252659866129206243219671633681286208956499952633370685989888960098084954742719978788425463076280549248624761445797200322025774847601077501261839135577696465884169289996756953347035809346587936831552564678928269851681275066679507994429117368820892833335277246964370806184539958497154299718109950045195337068953209732230159909730862209492939796706112091048490516753954885137398037737716953735239767024153079083060887610014817408325631010848848643987); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)
n = _sage_const_27584244764354155600648132819557552425739308915389010331967630630278781451355292616283908233886829051620691675066793826289384271685368839532793120327210935428497022861038124315374145401503459557634600149428324393706219187751525385285666118615589270213292021952450269684503014960000456627468842728153985933435658303773466724122153491920323012054102145457826086103327235133218830942039915609182594401161042859134214824202027169450776481815084629313897269088778093661872262506720997309450453842156237745662622884714477231701108303167577929395851134011771107866535083165178026955131807919002588840216970211283961590847119 

e = _sage_const_0x13333 

ct = _sage_const

E = GF(_sage_const_3 )
R = PolynomialRing(E, names=('X',)); (X,) = R._first_ngens(1)
n_acc = n
P = _sage_const_0 
i = _sage_const_0 
#On construit le polynôme P tel que P(3) = n
while n_acc > _sage_const_0 :
    P += (n_acc % _sage_const_3 )*X**i
    i += _sage_const_1 
    n_acc = n_acc // _sage_const_3 

RR = PolynomialRing(ZZ, names=('Z',)); (Z,) = RR._first_ngens(1)
P = RR(P)
#On vérifie que la construction n'a pas eu de problèmes
assert int(P(_sage_const_3 )) == int(n)

#On essaye de factoriser et on prend une des racinnes évaluée en 3
p = int(P.factor()[_sage_const_0 ][_sage_const_0 ](_sage_const_3 ))

#On s'assure qu'on a bien trouvé une racinne non triviale (pas 1 ni n)
assert n % p == _sage_const_0 
assert _sage_const_1  < p < n

q = n// p
d = pow(e, -_sage_const_1 , (p-_sage_const_1 ) * (q-_sage_const_1 ))

pt = pow(ct, d, n)
print(bytes.fromhex(hex(pt)[_sage_const_2 :]))


